(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
function mainView(r,e){return function(){var r=require(42),e=document.createElement("body");e.setAttribute("class","color-neutral");var o=document.createElement("main");o.setAttribute("id","page-wrap"),r(o,["\n      ",arguments[0],"\n      "]);var t=document.createElement("div");return t.setAttribute("id","modal"),r(t,["\n        ",arguments[1],"\n      "]),r(e,["\n      ",o,"\n      ",t,"\n    "]),e}(main(r,e),amazonModal(r,e))}function handleDonate(r,e){r.checkout={},r.donation={},r.paypal={},r.amazon={},e.on("DOMContentLoaded",function(){e.emit("amount",3500)}),e.on("toggleBitcoinView",function(){r.bitcoinView=!r.bitcoinView,e.emit("render")}),e.on("amount",function(o){r.donation.amount=o,r.paypal.buttonValue=paypalButtonValues[o],r.checkout.error=null,e.emit("render")}),e.on("checkout-method",function(e){r.donation.checkoutMethod=e}),e.on("checkout",function(){if(!r.donation.amount)return r.checkout.error="Please select an amount to donate",void e.emit("render");r.checkout=Object.assign(r.checkout,{amount:r.donation.amount,success:null,error:null,pending:!0}),e.emit("log:info",r.checkout),e.emit("render");const{checkoutMethod:o}=r.donation;handleCheckout[o](r,e)})}var html=require(14),choo=require(15),log=require(13),css=0,main=require(11);const amazonModal=require(4),{loadStripeCheckout:loadStripeCheckout,stripeCheckout:stripeCheckout}=require(3),{paypalButtonValues:paypalButtonValues}=require(2),handleCheckout={paypal:()=>{},stripe:stripeCheckout};null,null,null;var app=choo();app.use(log()),app.use(loadStripeCheckout),app.use(handleDonate),app.route("/",mainView),app.route("/*",mainView),app.mount("body");

},{"11":11,"12":12,"13":13,"14":14,"15":15,"2":2,"3":3,"4":4,"42":42}],2:[function(require,module,exports){
exports.paypalButtonValues={300:"C72UGKXK4786L",1e3:"BYEBQEHS5LHNC",3500:"57ZPMKJ8G893Y",5e3:"2ZVYTHK6Q7AFW",25e3:"69JGTY4DHSTEN"};

},{}],3:[function(require,module,exports){
const xhr=require(39),load=require(20);exports.loadStripeCheckout=function(e,o){load("https://checkout.stripe.com/checkout.js",function(t){return t?o.emit("log:error",t):xhr({uri:"/api/stripe-key",json:!0},function(t,r,n){return o.emit("log:debug",n),t||200!==r.statusCode?o.emit("log:error","Error loading stripe"):(e.stripeKey=n.key,e.stripeLoaded=!0,o.emit("stripeLoaded"),o.emit("log:info","loaded stripe checkout.js"),null)})})},exports.stripeCheckout=function(e,o){e.stripeLoaded?window.StripeCheckout.configure({key:e.stripeKey,locale:"auto"}).open({name:"freeCodeCamp.org",description:`$${e.checkout.amount/100} Donation to freeCodeCamp.org`,image:"images/fcc_puck600.png",panelLabel:"Donate",bitcoin:!1,amount:e.checkout.amount,billingAddress:!1,closed:function(){e.checkout.chargePending||(e.checkout.pending=!1,o.emit("render"))},token:function(t){e.checkout.chargePending=!0,xhr({uri:"/api/charge-stripe",method:"POST",body:{token:t,amount:e.checkout.amount},json:!0,headers:{"Content-Type":"application/json"}},function(t,r,n){e.checkout.pending=!1,e.checkout.chargePending=!1,t||200!==r.statusCode?(e.checkout.error=n.error||"Error processing donation",o.emit("log:error",e.checkout.error),t&&o.emit("log:error",t)):(e.checkout.success=!0,o.emit("log:debug",r)),o.emit("render")})}}):o.once("stripeLoaded",function(){o.emit("checkout")})};

},{"20":20,"39":39}],4:[function(require,module,exports){
const html=require(14);module.exports=function(){return function(){var e=require(42),t=document.createElement("div");t.setAttribute("id","modal-content");var n=document.createElement("h1");e(n,["Hello Modal"]);var o=document.createElement("div");return o.setAttribute("id","walletWidgetDiv"),e(t,["\n    ",n,"\n    ",o,"\n  "]),t}()};

},{"14":14,"42":42}],5:[function(require,module,exports){
const html=require(14);module.exports=function(){return function(){var t=require(42),e=document.createElement("div");e.setAttribute("class","donate-button-list-wrapper");var n=document.createElement("ul");n.setAttribute("class","list pl0 mb0");var r=document.createElement("li");r.setAttribute("class","dib mr2 mb2 bitcoin-button full-width");var o=document.createElement("a");return o.setAttribute("href",arguments[0]),o.setAttribute("target","_blank"),o.setAttribute("class",arguments[1]),t(o,["\n            See our cryptocurrency wallet info\n          "]),t(r,["\n          ",o,"\n        "]),t(n,["\n        ",r,"\n      "]),t(e,["\n      ",n,"\n    "]),e}("https://twitter.com/freeCodeCamp/status/904506721405730816","mt2 f6 f4-ns tc b dib pv3 ph3 link inv color-neutral-80 ba b--green")};

},{"14":14,"42":42}],6:[function(require,module,exports){
function isActive(t,e){return t.donation.amount===e}const html=require(14);module.exports=function(t,e){return function(){var t=require(42),e=document.createElement("div");e.setAttribute("class","donate-button-list-wrapper");var n=document.createElement("ul");n.setAttribute("class","list pl0 mb0");var i=document.createElement("li");i.setAttribute("class","dib mr2 mb2");var r=document.createElement("a");r.setAttribute("href",""),r.setAttribute("id","300"),r.onclick=arguments[0],r.setAttribute("class",arguments[1]+"\n          "+arguments[2]),t(r,["\n          $3\n      "]),t(i,["\n      ",r,"\n    "]);var a=document.createElement("li");a.setAttribute("class","dib mr2 mb2");var c=document.createElement("a");c.setAttribute("href",""),c.setAttribute("id","1000"),c.onclick=arguments[3],c.setAttribute("class",arguments[4]+"\n          "+arguments[5]),t(c,["\n          $10\n      "]),t(a,["\n      ",c,"\n    "]);var l=document.createElement("li");l.setAttribute("class","dib mr2 mb2");var s=document.createElement("a");s.setAttribute("href",""),s.setAttribute("id","3500"),s.onclick=arguments[6],s.setAttribute("class",arguments[7]+"\n          "+arguments[8]),t(s,["\n          $35\n      "]),t(l,["\n      ",s,"\n    "]);var u=document.createElement("li");u.setAttribute("class","dib mr2 mb2");var b=document.createElement("a");b.setAttribute("href",""),b.setAttribute("id","5000"),b.onclick=arguments[9],b.setAttribute("class",arguments[10]+"\n          "+arguments[11]),t(b,["\n          $50\n      "]),t(u,["\n      ",b,"\n    "]);var m=document.createElement("li");m.setAttribute("class","dib mr2 mb2");var o=document.createElement("a");return o.setAttribute("href",""),o.setAttribute("id","25000"),o.onclick=arguments[12],o.setAttribute("class",arguments[13]+"\n          "+arguments[14]),t(o,["\n          $250\n      "]),t(m,["\n      ",o,"\n    "]),t(n,["\n    ",i,"\n    ",a,"\n    ",l,"\n    ",u,"\n    ",m,"\n  "]),t(e,["\n  ",n,"\n  "]),e}(()=>{e("amount",300)},"mt2 f6 f4-ns tc b dib pv3 ph3 link inv color-neutral-80 ba b--green value ",isActive(t,300)?"active":"",()=>{e("amount",1e3)},"mt2 f6 f4-ns tc b dib pv3 ph3 link inv color-neutral-80 ba b--green value",isActive(t,1e3)?"active":"",()=>{e("amount",3500)},"mt2 f6 f4-ns tc b dib pv3 ph3 link inv color-neutral-80 ba b--green value",isActive(t,3500)?"active":"",()=>{e("amount",5e3)},"mt2 f6 f4-ns tc b dib pv3 ph3 link inv color-neutral-80 ba b--green value",isActive(t,5e3)?"active":"",()=>{e("amount",25e3)},"mt2 f6 f4-ns tc b dib pv3 ph3 link inv color-neutral-80 ba b--green value",isActive(t,25e3)?"active":"")};

},{"14":14,"42":42}],7:[function(require,module,exports){
const html=require(14);module.exports=function(e){var t="",o="";return e.checkout.pending&&(o="bg-lightest-blue",t="We are processing your donation..."),e.checkout.success&&(o="bg-light-green",t=`\n      You are now donating $${e.checkout.amount/100} monthly to freeCodeCamp.\n      Thank you!\n    `),e.checkout.error&&(o="bg-light-red",t=`\n      We had trouble processing your donation:\n      ${e.checkout.error}\n    `),function(){var e=require(42),t=document.createElement("section");t.setAttribute("class","pv2 ph3 max-500 "+arguments[1]);var o=document.createElement("p");return o.setAttribute("class","lh-copy measure"),e(o,["\n        ",arguments[0],"\n      "]),e(t,["\n      ",o,"\n    "]),t}(t,o)};

},{"14":14,"42":42}],8:[function(require,module,exports){
function donateView(e,t){const{pending:n,success:o,error:r}=e.checkout,u=n||o||r;return function(){var e=require(42),t=document.createElement("div"),n=document.createElement("h5");n.setAttribute("class","f4 mv0 color-neutral-80"),e(n,["\n        How much to donate monthly:\n      "]);var o=document.createElement("p"),r=document.createElement("h5");r.setAttribute("class","f4 mv0 color-neutral-80"),e(r,["\n        How to donate:\n      "]);var u=document.createElement("br"),s=document.createElement("p");return s.setAttribute("class","lh-copy measure f5 mt4 mt0-ns"),e(s,["\n        We receive donations in USD minus fees.\n      "]),e(t,["\n      ",n,"\n      ",arguments[0],"\n      ",o,"\n      ",r,"\n      ",arguments[1],"\n      ",u,"\n      ",s,"\n      ",arguments[2],"\n    "]),t}(donateButtons(e,t),providerButtons(e,t),u?donateResults(e):"")}const html=require(14),donateButtons=require(6),donateBitcoin=require(5),donateResults=require(7),providerButtons=require(9);module.exports=donateView;

},{"14":14,"42":42,"5":5,"6":6,"7":7,"9":9}],9:[function(require,module,exports){
const html=require(14);module.exports=function(t,e){return function(){var t=require(42),e=document.createElement("div");e.setAttribute("class","donate-button-list-wrapper");var n=document.createElement("ul");n.setAttribute("class","list pl0 mb0 payment-methods");var a=document.createElement("li");a.setAttribute("class","dib mr2 mb2 full-width");var i=document.createElement("button");i.onclick=arguments[0],i.setAttribute("class",arguments[1]),t(i,["\n            Credit or Debit Card\n        "]),t(a,["\n        ",i,"\n      "]);var r=document.createElement("li");r.setAttribute("class","dib mr2 mb2 full-width");var u=document.createElement("form");u.setAttribute("action","//www.paypal.com/cgi-bin/webscr"),u.setAttribute("method","post"),u.onsubmit="ga(\n        'send',\n        {\n          hitType: 'event',\n          eventCategory: 'donation',\n          eventAction: 'click',\n          eventLabel: 'paypal',\n          eventValue: "+arguments[5]+"\n        }\n      );",u.setAttribute("target","_blank");var o=document.createElement("input");o.setAttribute("name","cmd"),o.setAttribute("type","hidden"),o.setAttribute("value","_s-xclick");var l=document.createElement("input");l.setAttribute("name","hosted_button_id"),l.setAttribute("type","hidden"),l.setAttribute("value",arguments[2]);var c=document.createElement("button");c.setAttribute("name","submit"),c.onclick=arguments[3],c.setAttribute("type","submit"),c.setAttribute("class",arguments[4]);var s=document.createElement("img");return s.setAttribute("alt","pay with paypal"),s.setAttribute("src","/images/payment-logos/pp-logo-200px.png"),s.setAttribute("title","Pay with PayPal"),t(c,["\n        ",s,"\n      "]),t(u,["\n      ",o,"\n      ",l,"\n      ",c,"\n    "]),t(r,["\n      ",u,"\n      "]),t(n,["\n      ",a,"\n      ",r,"\n    "]),t(e,["\n    ",n,"\n  "]),e}(()=>{e("checkout-method","stripe"),e("checkout")},"mt2 f6 f4-ns tc b dib pv3 ph3 link inv color-neutral-80 ba b--green full-width",t.paypal.buttonValue,n=>{t.donation.amount||n.preventDefault(),e("checkout-method","paypal"),e("checkout")},"mt2 f6 f4-ns tc b dib pv3 ph3 link inv color-neutral-80 ba b--green full-width",t.donation.amount/100)};

},{"14":14,"42":42}],10:[function(require,module,exports){
var html=require(14);module.exports=function(){return function(){require(42);var e=document.createElement("img");return e.setAttribute("alt","freeCodeCamp logo"),e.setAttribute("src","images/FreeCodeCamplogo.svg"),e.setAttribute("title","freeCodeCamp Logo"),e}()};

},{"14":14,"42":42}],11:[function(require,module,exports){
function donateView(e,t){return function(){var e=require(42),t=document.createElement("article");t.setAttribute("class","cf ph3 ph5-ns pv4 color-neutral relative");var n=document.createElement("header");n.setAttribute("class","fn fl-ns w-70-l pr4-ns");var o=document.createElement("h1");o.setAttribute("class","f3 mb3 mt0 lh-title"),e(o,[arguments[0]]);var r=document.createElement("div");r.setAttribute("class","fn fl-ns");var a=document.createElement("h2");e(a,["From freeCodeCamp founder Quincy Larson"]);var c=document.createElement("hr"),s=document.createElement("p");e(s,["freeCodeCamp is one of the biggest learning communities on the internet."]);var m=document.createElement("p");e(m,["Together, we've created thousands of videos, articles, and coding challenges you can learn from."]);var l=document.createElement("p");e(l,["We also have a network of thousands of local study groups worldwide."]);var d=document.createElement("p");e(d,["But all of this is run by a tiny nonprofit. And we need your donations to survive."]);var u=document.createElement("p");e(u,["We're just getting started. Help this community reach its full potential. Set up a monthly donation you can afford."]);var i=document.createElement("br"),f=document.createElement("p");e(f,["Thanks,"]);var h=document.createElement("br"),p=document.createElement("p"),v=document.createElement("strong");e(v,["Quincy Larson"]),e(p,[v]);var E=document.createElement("p");e(E,["freeCodeCamp Founder"]),e(r,["\n          ",a,"\n          ",c,"\n          ",s,"\n          ",m,"\n          ",l,"\n          ",d,"\n          ",u,"\n          ",i,"\n          ",f,"\n          ",h,"\n          ",p,"\n          ",E,"\n        "]),e(n,["\n        ",o,"\n        ",r,"\n      "]);var g=document.createElement("div");g.setAttribute("class","fn fl-ns w-30-l");var y=document.createElement("div");y.setAttribute("class","pt1 mt2"),e(y,["\n          ",arguments[1],"\n        "]);var b=document.createElement("h5");b.setAttribute("class","f4 mv0 color-neutral-80"),e(b,["Where your donation goes"]);var w=document.createElement("br"),A=document.createElement("p");A.setAttribute("class","lh-copy measure f5 mt4 mt0-ns");var C=document.createElement("strong");e(C,["Technology:"]),e(A,["\n          ",C," Servers, bandwidth, development, and maintenance. freeCodeCamp is one of the top technology websites in the world, and it runs on a fraction of what other top websites spend.\n        "]);var L=document.createElement("p");L.setAttribute("class","lh-copy measure f5 mt4 mt0-ns");var j=document.createElement("strong");return e(j,["People and Projects:"]),e(L,["\n          ",j," Other top websites have thousands of employees. We only have 3 staff to support a wide variety of projects, making your donation a great investment in a highly-efficient nonprofit organization.\n        "]),e(g,["\n        ",y,"\n        ",b,"\n        ",w,"\n        ",A,"\n        ",L,"\n      "]),e(t,["\n      ",n,"\n      ",g,"\n  "]),t}(fccLogo(),donate(e,t))}var html=require(14),donate=require(8);const fccLogo=require(10);module.exports=donateView;

},{"10":10,"14":14,"42":42,"8":8}],12:[function(require,module,exports){

},{}],13:[function(require,module,exports){
function logger(n){n=n||{};var e="undefined"!=typeof window&&window.performance&&window.performance.getEntriesByName,o=void 0===n.clearResourceTimings||n.clearResourceTimings,r=void 0===n.timing||n.timing;return e&&o&&(window.performance.onresourcetimingbufferfull=function(){window.performance.clearResourceTimings()}),function(n,o){function i(){var n=window.performance.getEntriesByName("choo:render"),e=n.length-1;if(e<0)return t.info("render");var o=n[e].duration.toFixed(),r=Math.min((600/o).toFixed(),60),i=r+"fps "+o+"ms";60===r?t.info("render",i):t.warn("render",i)}var t=nanologger("choo");o.on("*",function(n,a){e&&r&&"render"===n?window.requestAnimationFrame(i):/^log:\w{4,5}/.test(n)||t.info(n,a);var f=o.listeners(n);"pushState"!==n&&"DOMContentLoaded"!==n&&(f.length||t.error("No listeners for "+n))}),o.on("log:debug",function(n,e){t.debug(n,e)}),o.on("log:info",function(n,e){t.info(n,e)}),o.on("log:warn",function(n,e){t.warn(n,e)}),o.on("log:error",function(n,e){t.error(n,e)}),o.on("log:fatal",function(n,e){t.fatal(n,e)})}}var nanologger=require(24);module.exports=logger;

},{"24":24}],14:[function(require,module,exports){
module.exports={};

},{}],15:[function(require,module,exports){
function Choo(t){if(!(this instanceof Choo))return new Choo(t);t=t||{};var e=this;this._events={DOMCONTENTLOADED:"DOMContentLoaded",DOMTITLECHANGE:"DOMTitleChange",REPLACESTATE:"replaceState",PUSHSTATE:"pushState",NAVIGATE:"navigate",POPSTATE:"popState",RENDER:"render"},this._historyEnabled=void 0===t.history||t.history,this._hrefEnabled=void 0===t.href||t.href,this._hasWindow="undefined"!=typeof window,this._createLocation=nanolocation,this._loaded=!1,this._tree=null,this.router=nanorouter({curry:!0}),this.emitter=nanobus("choo.emit");var n={events:this._events};this._hasWindow?(this.state=window.initialState?xtend(window.initialState,n):n,delete window.initialState):this.state=n,this._hasWindow&&(this.state.title=document.title),this.emitter.prependListener(this._events.DOMTITLECHANGE,function(t){e.state.title=t,e._hasWindow&&(document.title=t)})}var scrollToAnchor=require(35),documentReady=require(16),nanolocation=require(23),nanotiming=require(31),nanorouter=require(30),nanomorph=require(25),nanoquery=require(28),nanohref=require(22),nanoraf=require(29),nanobus=require(21),xtend=require(40);module.exports=Choo;var HISTORY_OBJECT={};Choo.prototype.route=function(t,e){var n=this;this.router.on(t,function(o){return function(){n.state.params=o,n.state.route=t;var i=nanotiming("choo.route('"+t+"')"),r=e(n.state,function(t,e){n.emitter.emit(t,e)});return i(),r}})},Choo.prototype.use=function(t){var e="choo.use",n=nanotiming(e=t.storeName?e+"("+t.storeName+")":e);t(this.state,this.emitter,this),n()},Choo.prototype.start=function(){var t=this;return this._historyEnabled&&(this.emitter.prependListener(this._events.NAVIGATE,function(){t.state.query=nanoquery(window.location.search),t._loaded&&(t.emitter.emit(t._events.RENDER),setTimeout(scrollToAnchor.bind(null,window.location.hash),0))}),this.emitter.prependListener(this._events.POPSTATE,function(){t.emitter.emit(t._events.NAVIGATE)}),this.emitter.prependListener(this._events.PUSHSTATE,function(e){window.history.pushState(HISTORY_OBJECT,null,e),t.emitter.emit(t._events.NAVIGATE)}),this.emitter.prependListener(this._events.REPLACESTATE,function(e){window.history.replaceState(HISTORY_OBJECT,null,e),t.emitter.emit(t._events.NAVIGATE)}),window.onpopstate=function(){t.emitter.emit(t._events.POPSTATE)},t._hrefEnabled&&nanohref(function(e){var n=e.href;n!==window.location.href&&t.emitter.emit(t._events.PUSHSTATE,n)})),this.state.href=this._createLocation(),this.state.query=nanoquery(window.location.search),this._tree=this.router(this.state.href),this.emitter.prependListener(t._events.RENDER,nanoraf(function(){var e=nanotiming("choo.render");t.state.href=t._createLocation();var n=t.router(t.state.href),o=nanotiming("choo.morph");nanomorph(t._tree,n),o(),e()})),documentReady(function(){t.emitter.emit(t._events.DOMCONTENTLOADED),t._loaded=!0}),this._tree},Choo.prototype.mount=function(t){var e=this;documentReady(function(){var n=nanotiming("choo.render"),o=e.start();e._tree="string"==typeof t?document.querySelector(t):t;var i=nanotiming("choo.morph");nanomorph(e._tree,o),i(),n()})},Choo.prototype.toString=function(t,e){return(this.state=xtend(this.state,e||{})).href=t.replace(/\?.+$/,""),this.state.query=nanoquery(t),this.router(t).toString()};

},{"16":16,"21":21,"22":22,"23":23,"25":25,"28":28,"29":29,"30":30,"31":31,"35":35,"40":40}],16:[function(require,module,exports){
"use strict";function ready(e){var t=document.readyState;if("complete"===t||"interactive"===t)return setTimeout(e,0);document.addEventListener("DOMContentLoaded",function(){e()})}module.exports=ready;

},{}],17:[function(require,module,exports){
function forEach(r,t,o){if(!isFunction(t))throw new TypeError("iterator must be a function");arguments.length<3&&(o=this),"[object Array]"===toString.call(r)?forEachArray(r,t,o):"string"==typeof r?forEachString(r,t,o):forEachObject(r,t,o)}function forEachArray(r,t,o){for(var n=0,a=r.length;n<a;n++)hasOwnProperty.call(r,n)&&t.call(o,r[n],n,r)}function forEachString(r,t,o){for(var n=0,a=r.length;n<a;n++)t.call(o,r.charAt(n),n,r)}function forEachObject(r,t,o){for(var n in r)hasOwnProperty.call(r,n)&&t.call(o,r[n],n,r)}var isFunction=require(19);module.exports=forEach;var toString=Object.prototype.toString,hasOwnProperty=Object.prototype.hasOwnProperty;

},{"19":19}],18:[function(require,module,exports){
(function (global){
var win;win="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{},module.exports=win;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],19:[function(require,module,exports){
function isFunction(o){var t=toString.call(o);return"[object Function]"===t||"function"==typeof o&&"[object RegExp]"!==t||"undefined"!=typeof window&&(o===window.setTimeout||o===window.alert||o===window.confirm||o===window.prompt)}module.exports=isFunction;var toString=Object.prototype.toString;

},{}],20:[function(require,module,exports){
function load(o,e){var n=document.head||document.getElementsByTagName("head")[0],r=document.createElement("script");r.type="text/javascript",r.async=!0,r.src=o,e&&(r.onload=function(){r.onerror=r.onload=null,e(null,r)},r.onerror=function(){r.onerror=r.onload=null,e(new Error("Failed to load "+o),r)}),n.appendChild(r)}module.exports=load;

},{}],21:[function(require,module,exports){
function Nanobus(t){if(!(this instanceof Nanobus))return new Nanobus(t);this._name=t||"nanobus",this._starListeners=[],this._listeners={}}var splice=require(34),nanotiming=require(31);module.exports=Nanobus,Nanobus.prototype.emit=function(t){for(var s=[],e=1,i=arguments.length;e<i;e++)s.push(arguments[e]);var n=nanotiming(this._name+"('"+t+"')"),r=this._listeners[t];return r&&r.length>0&&this._emit(this._listeners[t],s),this._starListeners.length>0&&this._emit(this._starListeners,t,s,n.uuid),n(),this},Nanobus.prototype.on=Nanobus.prototype.addListener=function(t,s){return"*"===t?this._starListeners.push(s):(this._listeners[t]||(this._listeners[t]=[]),this._listeners[t].push(s)),this},Nanobus.prototype.prependListener=function(t,s){return"*"===t?this._starListeners.unshift(s):(this._listeners[t]||(this._listeners[t]=[]),this._listeners[t].unshift(s)),this},Nanobus.prototype.once=function(t,s){function e(){s.apply(i,arguments),i.removeListener(t,e)}var i=this;return this.on(t,e),this},Nanobus.prototype.prependOnceListener=function(t,s){function e(){s.apply(i,arguments),i.removeListener(t,e)}var i=this;return this.prependListener(t,e),this},Nanobus.prototype.removeListener=function(t,s){function e(t,s){if(t){var e=t.indexOf(s);return-1!==e?(splice(t,e,1),!0):void 0}}return"*"===t?(this._starListeners=this._starListeners.slice(),e(this._starListeners,s)):(void 0!==this._listeners[t]&&(this._listeners[t]=this._listeners[t].slice()),e(this._listeners[t],s))},Nanobus.prototype.removeAllListeners=function(t){return t?"*"===t?this._starListeners=[]:this._listeners[t]=[]:(this._starListeners=[],this._listeners={}),this},Nanobus.prototype.listeners=function(t){var s="*"!==t?this._listeners[t]:this._starListeners,e=[];if(s)for(var i=s.length,n=0;n<i;n++)e.push(s[n]);return e},Nanobus.prototype._emit=function(t,s,e,i){if(void 0!==t&&0!==t.length){void 0===e&&(e=s,s=null),s&&(e=void 0!==i?[s,i].concat(e):[s].concat(e));for(var n=t.length,r=0;r<n;r++){var o=t[r];o.apply(o,e)}}};

},{"31":31,"34":34}],22:[function(require,module,exports){
function href(e,t){t=t||window.document,window.addEventListener("click",function(r){if(!(r.button&&0!==r.button||r.ctrlKey||r.metaKey||r.altKey||r.shiftKey||r.defaultPrevented)){var n=function e(r){if(r&&r!==t)return"a"!==r.localName||void 0===r.href?e(r.parentNode):r}(r.target);n&&(window.location.origin!==n.origin||n.hasAttribute("download")||"_blank"===n.getAttribute("target")&&safeExternalLink.test(n.getAttribute("rel"))||protocolLink.test(n.getAttribute("href"))||(r.preventDefault(),e(n)))}})}var safeExternalLink=/(noopener|noreferrer) (noopener|noreferrer)/,protocolLink=/^[\w-_]+:/;module.exports=href;

},{}],23:[function(require,module,exports){
function nanolocation(){return window.location.pathname.replace(/\/$/,"")+window.location.hash.replace(/^#/,"/")}module.exports=nanolocation;

},{}],24:[function(require,module,exports){
function Nanologger(o,t){if(t=t||{},!(this instanceof Nanologger))return new Nanologger(o,t);this._name=o||"",this._colors=xtend(defaultColors,t.colors||{});try{this.logLevel=window.localStorage.getItem("logLevel")||"info"}catch(o){this.logLevel="info"}this._logLevel=levels[this.logLevel]}function color(o){return"color: "+o+";"}function getTimeStamp(){var o=new Date;return pad(o.getHours().toString())+":"+pad(o.getMinutes().toString())+":"+pad(o.getSeconds().toString())}function pad(o){return 2!==o.length?0+o:o}var xtend=require(40),emojis={trace:"🔍",debug:"🐛",info:"✨",warn:"⚠️",error:"🚨",fatal:"💀"},levels={trace:10,debug:20,info:30,warn:40,error:50,fatal:60},defaultColors={foreground:"#d3c0c8",background:"#2d2d2d",black:"#2d2d2d",red:"#f2777a",green:"#99cc99",yellow:"#ffcc66",blue:"#6699cc",magenta:"#cc99cc",cyan:"#66cccc",white:"#d3d0c8",brightBlack:"#747369"};module.exports=Nanologger,Nanologger.prototype.trace=function(){for(var o=["trace"],t=0,r=arguments.length;t<r;t++)o.push(arguments[t]);this._print.apply(this,o)},Nanologger.prototype.debug=function(){for(var o=["debug"],t=0,r=arguments.length;t<r;t++)o.push(arguments[t]);this._print.apply(this,o)},Nanologger.prototype.info=function(){for(var o=["info"],t=0,r=arguments.length;t<r;t++)o.push(arguments[t]);this._print.apply(this,o)},Nanologger.prototype.warn=function(){for(var o=["warn"],t=0,r=arguments.length;t<r;t++)o.push(arguments[t]);this._print.apply(this,o)},Nanologger.prototype.error=function(){for(var o=["error"],t=0,r=arguments.length;t<r;t++)o.push(arguments[t]);this._print.apply(this,o)},Nanologger.prototype.fatal=function(){for(var o=["fatal"],t=0,r=arguments.length;t<r;t++)o.push(arguments[t]);this._print.apply(this,o)},Nanologger.prototype._print=function(o){if(!(levels[o]<this._logLevel)){var t=getTimeStamp(),r=emojis[o],e=this._name||"unknown",n="error"===o||o.fatal?this._colors.red:"warn"===o?this._colors.yellow:this._colors.green,l=[],s=[null],a="%c%s "+r+" %c%s";s.push(color(this._colors.brightBlack),t),s.push(color(this._colors.magenta),e);for(var i=1,c=arguments.length;i<c;i++){var g=arguments[i];"string"==typeof g?1===i?(a+=" %c%s",s.push(color(n)),s.push(g)):/ms$/.test(g)?(a+=" %c%s",s.push(color(this._colors.brightBlack)),s.push(g)):(a+=" %c%s",s.push(color(this._colors.white)),s.push(g)):"number"==typeof g?(a+=" %c%d",s.push(color(this._colors.magenta)),s.push(g)):l.push(g)}s[0]=a,l.forEach(function(o){s.push(o)}),console.log.apply(console,s)}};

},{"40":40}],25:[function(require,module,exports){
function nanomorph(e,a){return walk(a,e)}function walk(e,a){return a?e?e.isSameNode&&e.isSameNode(a)?a:e.tagName!==a.tagName?e:(morph(e,a),updateChildren(e,a),a):null:e}function updateChildren(e,a){for(var i,d,l,o,r=0,n=0;i=a.childNodes[n],d=e.childNodes[n-r],i||d;n++)if(d)if(i)if(same(d,i))(l=walk(d,i))!==i&&(a.replaceChild(l,i),r++);else{o=null;for(var m=n;m<a.childNodes.length;m++)if(same(a.childNodes[m],d)){o=a.childNodes[m];break}o?((l=walk(d,o))!==o&&r++,a.insertBefore(l,i)):d.id||i.id?(a.insertBefore(d,i),r++):(l=walk(d,i))!==i&&(a.replaceChild(l,i),r++)}else a.appendChild(d),r++;else a.removeChild(i),n--}function same(e,a){return e.id?e.id===a.id:e.isSameNode?e.isSameNode(a):e.tagName===a.tagName&&(e.type===TEXT_NODE&&e.nodeValue===a.nodeValue)}var morph=require(27),TEXT_NODE=3;module.exports=nanomorph;

},{"27":27}],26:[function(require,module,exports){
module.exports=["onclick","ondblclick","onmousedown","onmouseup","onmouseover","onmousemove","onmouseout","onmouseenter","onmouseleave","ontouchcancel","ontouchend","ontouchmove","ontouchstart","ondragstart","ondrag","ondragenter","ondragleave","ondragover","ondrop","ondragend","onkeydown","onkeypress","onkeyup","onunload","onabort","onerror","onresize","onscroll","onselect","onchange","onsubmit","onreset","onfocus","onblur","oninput","oncontextmenu","onfocusin","onfocusout"];

},{}],27:[function(require,module,exports){
function morph(e,t){var u=e.nodeType,a=e.nodeName;u===ELEMENT_NODE&&copyAttrs(e,t),u!==TEXT_NODE&&u!==COMMENT_NODE||t.nodeValue!==e.nodeValue&&(t.nodeValue=e.nodeValue),"INPUT"===a?updateInput(e,t):"OPTION"===a?updateOption(e,t):"TEXTAREA"===a&&updateTextarea(e,t),copyEvents(e,t)}function copyAttrs(e,t){for(var u=t.attributes,a=e.attributes,r=null,n=null,l=null,i=null,o=a.length-1;o>=0;--o)l=(i=a[o]).name,r=i.namespaceURI,n=i.value,r?(l=i.localName||l,t.getAttributeNS(r,l)!==n&&t.setAttributeNS(r,l,n)):t.hasAttribute(l)?t.getAttribute(l)!==n&&("null"===n||"undefined"===n?t.removeAttribute(l):t.setAttribute(l,n)):t.setAttribute(l,n);for(var v=u.length-1;v>=0;--v)!1!==(i=u[v]).specified&&(l=i.name,(r=i.namespaceURI)?(l=i.localName||l,e.hasAttributeNS(r,l)||t.removeAttributeNS(r,l)):e.hasAttributeNS(null,l)||t.removeAttribute(l))}function copyEvents(e,t){for(var u=0;u<eventsLength;u++){var a=events[u];e[a]?t[a]=e[a]:t[a]&&(t[a]=void 0)}}function updateOption(e,t){updateAttribute(e,t,"selected")}function updateInput(e,t){var u=e.value,a=t.value;updateAttribute(e,t,"checked"),updateAttribute(e,t,"disabled"),u!==a&&(t.setAttribute("value",u),t.value=u),"null"===u&&(t.value="",t.removeAttribute("value")),e.hasAttributeNS(null,"value")?"range"===t.type&&(t.value=u):t.removeAttribute("value")}function updateTextarea(e,t){var u=e.value;if(u!==t.value&&(t.value=u),t.firstChild&&t.firstChild.nodeValue!==u){if(""===u&&t.firstChild.nodeValue===t.placeholder)return;t.firstChild.nodeValue=u}}function updateAttribute(e,t,u){e[u]!==t[u]&&(t[u]=e[u],e[u]?t.setAttribute(u,""):t.removeAttribute(u))}var events=require(26),eventsLength=events.length,ELEMENT_NODE=1,TEXT_NODE=3,COMMENT_NODE=8;module.exports=morph;

},{"26":26}],28:[function(require,module,exports){
function qs(e){var o={};return e.replace(/^.*\?/,"").replace(reg,function(e,n,r,c){o[decodeURIComponent(n)]=decodeURIComponent(c)}),o}var reg=/([^?=&]+)(=([^&]*))?/g;module.exports=qs;

},{}],29:[function(require,module,exports){
"use strict";function nanoraf(n,r){r||(r=window.requestAnimationFrame);var a=!1,o=null;return function(){null!==o||a||(a=!0,r(function(){a=!1;for(var r=o.length,t=new Array(r),u=0;u<r;u++)t[u]=o[u];n.apply(n,t),o=null})),o=arguments}}module.exports=nanoraf;

},{}],30:[function(require,module,exports){
function Nanorouter(e){function r(e){return n?(e=pathname(e,isLocalFile))===a?t():(a=e,(t=o(e))()):o(e)}var o=wayfarer((e=e||{}).default||"/404"),n=e.curry||!1,t=null,a=null;return r.router=o,r.on=function(e,r){e=e.replace(/^[#\/]/,""),o.on(e,r)},r}function pathname(e,r){return(e=r?e.replace(stripElectron,""):e.replace(prefix,"")).replace(suffix,"").replace(normalize,"/")}var wayfarer=require(37),isLocalFile=/file:\/\//.test("object"==typeof window&&window.location&&window.location.origin),electron="^(file://|/)(.*.html?/?)?",protocol="^(http(s)?(://))?(www.)?",domain="[a-zA-Z0-9-_.]+(:[0-9]{1,5})?(/{1})?",qs="[?].*$",stripElectron=new RegExp(electron),prefix=new RegExp(protocol+domain),normalize=new RegExp("#"),suffix=new RegExp(qs);module.exports=Nanorouter;

},{"37":37}],31:[function(require,module,exports){
function nanotiming(r){function e(e){var a="end-"+n+"-"+r;perf.mark(a),onIdle(function(){var i=r+" ["+n+"]";perf.measure(i,o,a),perf.clearMarks(o),perf.clearMarks(a),e&&e(r)})}if(disabled)return noop;var n=(1e4*perf.now()).toFixed()%Number.MAX_SAFE_INTEGER,o="start-"+n+"-"+r;return perf.mark(o),e.uuid=n,e}function noop(r){r&&onIdle(r)}var onIdle=require(32),perf,disabled=!0;try{perf=window.performance,disabled="true"===window.localStorage.DISABLE_NANOTIMING||!perf.mark}catch(r){}module.exports=nanotiming;

},{"32":32}],32:[function(require,module,exports){
function onIdle(d,e){e=e||dftOpts;var n;return hasIdle?(n=window.requestIdleCallback(function(n){if(n.timeRemaining()<=10&&!n.didTimeout)return onIdle(d,e);d(n)},e),window.cancelIdleCallback.bind(window,n)):hasWindow?(n=setTimeout(d,0),clearTimeout.bind(window,n)):void 0}var dftOpts={},hasWindow="undefined"!=typeof window,hasIdle=hasWindow&&window.requestIdleCallback;module.exports=onIdle;

},{}],33:[function(require,module,exports){
var trim=require(36),forEach=require(17),isArray=function(r){return"[object Array]"===Object.prototype.toString.call(r)};module.exports=function(r){if(!r)return{};var t={};return forEach(trim(r).split("\n"),function(r){var i=r.indexOf(":"),e=trim(r.slice(0,i)).toLowerCase(),o=trim(r.slice(i+1));void 0===t[e]?t[e]=o:isArray(t[e])?t[e].push(o):t[e]=[t[e],o]}),t};

},{"17":17,"36":36}],34:[function(require,module,exports){
"use strict";module.exports=function(t,e,r){var n,o=t.length;if(!(e>=o||0===r)){var f=o-(r=e+r>o?o-e:r);for(n=e;n<f;++n)t[n]=t[n+r];t.length=f}};

},{}],35:[function(require,module,exports){
function scrollToAnchor(o,c){if(o)try{var r=document.querySelector(o);r&&r.scrollIntoView(c)}catch(o){}}module.exports=scrollToAnchor;

},{}],36:[function(require,module,exports){
function trim(r){return r.replace(/^\s*|\s*$/g,"")}exports=module.exports=trim,exports.left=function(r){return r.replace(/^\s*/,"")},exports.right=function(r){return r.replace(/\s*$/,"")};

},{}],37:[function(require,module,exports){
function Wayfarer(r){function e(r){for(var e=new Array(arguments.length),n=1;n<e.length;n++)e[n]=arguments[n];var i=t.match(r);if(i&&i.cb){e[0]=i.params;var c=i.cb;return c.apply(c,e)}var f=t.match(a);if(f&&f.cb){e[0]=f.params;var o=f.cb;return o.apply(o,e)}throw new Error("route '"+r+"' did not match")}if(!(this instanceof Wayfarer))return new Wayfarer(r);var a=(r||"").replace(/^\//,""),t=trie();return e._trie=t,e.emit=e,e.on=function(r,a){return r=r||"/",a.route=r,a&&a._wayfarer&&a._trie?t.mount(r,a._trie.trie):t.create(r).cb=a,e},e._wayfarer=!0,e}var trie=require(38);module.exports=Wayfarer;

},{"38":38}],38:[function(require,module,exports){
function Trie(){if(!(this instanceof Trie))return new Trie;this.trie={nodes:{}}}var mutate=require(41),xtend=require(40);module.exports=Trie,Trie.prototype.create=function(e){function n(e,t){var o=r.hasOwnProperty(e)&&r[e];if(!1===o)return t;var i=null;return/^:|^\*/.test(o)?(t.nodes.hasOwnProperty("$$")?i=t.nodes.$$:(i={nodes:{}},t.nodes.$$=i),"*"===o[0]&&(t.wildcard=!0),t.name=o.replace(/^:|^\*/,"")):t.nodes.hasOwnProperty(o)?i=t.nodes[o]:(i={nodes:{}},t.nodes[o]=i),n(e+1,i)}var r=e.replace(/^\//,"").split("/");return n(0,this.trie)},Trie.prototype.match=function(e){function n(e,o){if(void 0!==o){var i=r[e];if(void 0===i)return o;if(o.nodes.hasOwnProperty(i))return n(e+1,o.nodes[i]);if(o.name){try{t[o.name]=decodeURIComponent(i)}catch(r){return n(e,void 0)}return n(e+1,o.nodes.$$)}if(o.wildcard){try{t.wildcard=decodeURIComponent(r.slice(e).join("/"))}catch(r){return n(e,void 0)}return o.nodes.$$}return n(e+1)}}var r=e.replace(/^\//,"").split("/"),t={},o=n(0,this.trie);if(o)return o=xtend(o),o.params=t,o},Trie.prototype.mount=function(e,n){var r=e.replace(/^\//,"").split("/"),t=null,o=null;if(1===r.length)o=r[0],t=this.create(o);else{var i=r.splice(0,r.length-1).join("/");o=r[0],t=this.create(i)}mutate(t.nodes,n.nodes),n.name&&(t.name=n.name),t.nodes[""]&&(Object.keys(t.nodes[""]).forEach(function(e){"nodes"!==e&&(t[e]=t.nodes[""][e])}),mutate(t.nodes,t.nodes[""].nodes),delete t.nodes[""].nodes)};

},{"40":40,"41":41}],39:[function(require,module,exports){
"use strict";function forEachArray(e,t){for(var r=0;r<e.length;r++)t(e[r])}function isEmpty(e){for(var t in e)if(e.hasOwnProperty(t))return!1;return!0}function initParams(e,t,r){var n=e;return isFunction(t)?(r=t,"string"==typeof e&&(n={uri:e})):n=xtend(t,{uri:e}),n.callback=r,n}function createXHR(e,t,r){return t=initParams(e,t,r),_createXHR(t)}function _createXHR(e){function t(){var e=void 0;if(e=a.response?a.response:a.responseText||getXml(a),R)try{e=JSON.parse(e)}catch(e){}return e}function r(e){return clearTimeout(c),e instanceof Error||(e=new Error(""+(e||"Unknown XMLHttpRequest Error"))),e.statusCode=0,s(e,X)}function n(){if(!u){var r;clearTimeout(c);var n=X,o=null;return 0!==(r=e.useXDR&&void 0===a.status?200:1223===a.status?204:a.status)?(n={body:t(),statusCode:r,method:p,headers:{},url:d,rawRequest:a},a.getAllResponseHeaders&&(n.headers=parseHeaders(a.getAllResponseHeaders()))):o=new Error("Internal XMLHttpRequest Error"),s(o,n,n.body)}}if(void 0===e.callback)throw new Error("callback argument missing");var o=!1,s=function(t,r,n){o||(o=!0,e.callback(t,r,n))},a=e.xhr||null;a||(a=e.cors||e.useXDR?new createXHR.XDomainRequest:new createXHR.XMLHttpRequest);var i,u,c,d=a.url=e.uri||e.url,p=a.method=e.method||"GET",l=e.body||e.data,f=a.headers=e.headers||{},m=!!e.sync,R=!1,X={body:void 0,headers:{},statusCode:0,method:p,url:d,rawRequest:a};if("json"in e&&!1!==e.json&&(R=!0,f.accept||f.Accept||(f.Accept="application/json"),"GET"!==p&&"HEAD"!==p&&(f["content-type"]||f["Content-Type"]||(f["Content-Type"]="application/json"),l=JSON.stringify(!0===e.json?l:e.json))),a.onreadystatechange=function(){4===a.readyState&&setTimeout(n,0)},a.onload=n,a.onerror=r,a.onprogress=function(){},a.onabort=function(){u=!0},a.ontimeout=r,a.open(p,d,!m,e.username,e.password),m||(a.withCredentials=!!e.withCredentials),!m&&e.timeout>0&&(c=setTimeout(function(){if(!u){u=!0,a.abort("timeout");var e=new Error("XMLHttpRequest timeout");e.code="ETIMEDOUT",r(e)}},e.timeout)),a.setRequestHeader)for(i in f)f.hasOwnProperty(i)&&a.setRequestHeader(i,f[i]);else if(e.headers&&!isEmpty(e.headers))throw new Error("Headers cannot be set on an XDomainRequest object");return"responseType"in e&&(a.responseType=e.responseType),"beforeSend"in e&&"function"==typeof e.beforeSend&&e.beforeSend(a),a.send(l||null),a}function getXml(e){if("document"===e.responseType)return e.responseXML;var t=e.responseXML&&"parsererror"===e.responseXML.documentElement.nodeName;return""!==e.responseType||t?null:e.responseXML}function noop(){}var window=require(18),isFunction=require(19),parseHeaders=require(33),xtend=require(40);module.exports=createXHR,createXHR.XMLHttpRequest=window.XMLHttpRequest||noop,createXHR.XDomainRequest="withCredentials"in new createXHR.XMLHttpRequest?createXHR.XMLHttpRequest:window.XDomainRequest,forEachArray(["get","put","post","patch","head","delete"],function(e){createXHR["delete"===e?"del":e]=function(t,r,n){return r=initParams(t,r,n),r.method=e.toUpperCase(),_createXHR(r)}});

},{"18":18,"19":19,"33":33,"40":40}],40:[function(require,module,exports){
function extend(){for(var r={},e=0;e<arguments.length;e++){var t=arguments[e];for(var n in t)hasOwnProperty.call(t,n)&&(r[n]=t[n])}return r}module.exports=extend;var hasOwnProperty=Object.prototype.hasOwnProperty;

},{}],41:[function(require,module,exports){
function extend(r){for(var e=1;e<arguments.length;e++){var t=arguments[e];for(var n in t)hasOwnProperty.call(t,n)&&(r[n]=t[n])}return r}module.exports=extend;var hasOwnProperty=Object.prototype.hasOwnProperty;

},{}],42:[function(require,module,exports){
module.exports=function e(t,n){for(var o=0;o<n.length;o++){var i=n[o];if(Array.isArray(i))e(t,i);else{if(("number"==typeof i||"boolean"==typeof i||i instanceof Date||i instanceof RegExp)&&(i=i.toString()),"string"==typeof i){if(/^[\n\r\s]+$/.test(i))continue;if(t.lastChild&&"#text"===t.lastChild.nodeName){t.lastChild.nodeValue+=i;continue}i=document.createTextNode(i)}i&&i.nodeType&&t.appendChild(i)}}};

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
